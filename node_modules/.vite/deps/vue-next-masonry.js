import {
  defineComponent,
  h
} from "./chunk-V5T7GOSI.js";
import "./chunk-FAW2VN4A.js";

// node_modules/vue-next-masonry/lib.es.js
function r(t, e) {
  if (parseInt(t, 10) > -1)
    return t;
  if ("object" != typeof t)
    return 0;
  let r2 = 1 / 0, i2 = t.default || 0;
  return Object.entries(t).forEach(([t2, n2]) => {
    const s = parseInt(t2, 10), l = n2, a = parseInt(l, 10);
    if (Number.isNaN(s) || Number.isNaN(a))
      return;
    e <= s && s < r2 && (r2 = s, i2 = l);
  }), i2;
}
var i = defineComponent({ props: { tag: { type: [String], default: "div" }, cols: { type: [Object, Number, String], default: 2 }, gutter: { type: [Object, Number, String], default: 0 }, css: { type: [Boolean], default: true }, columnTag: { type: [String], default: "div" }, columnClass: { type: [String, Array, Object], default: () => [] }, columnAttr: { type: [Object], default: () => {
} }, resolveSlot: { type: Boolean, default: false } }, data: () => ({ wrapperWidth: 0, displayColumns: 2, displayGutter: 0 }), activated() {
  this.$nextTick(this.render);
}, mounted() {
  window.addEventListener("resize", this.render), this.$nextTick(this.render);
}, updated() {
  this.$nextTick(this.render);
}, unmounted() {
  window.removeEventListener("resize", this.render);
}, methods: { render() {
  const t = (null == window ? void 0 : window.innerWidth) || 1 / 0, { wrapperWidth: e } = this;
  e !== t && (this.wrapperWidth = t, this.calculateColumnCount(this.wrapperWidth), this.calculateGutterSize(this.wrapperWidth));
}, calculateGutterSize(t) {
  this.displayGutter = r(this.gutter, t);
}, calculateColumnCount(t) {
  let e = r(this.cols, t) || 0;
  e = Math.max(1, Number(e)), this.displayColumns = e;
}, getColumnsWithChildItems() {
  var t, e, r2;
  const i2 = [], n2 = null == (e = (t = this.$slots).default) ? void 0 : e.call(t);
  let s = [];
  if (n2.length > 1 ? s = n2 : (s = n2[0].children, 1 === s.length && this.resolveSlot && (s = (null == (r2 = s[0]) ? void 0 : r2.children) || [])), 0 === s.length)
    return [];
  for (let l = 0, a = 0; l < s.length; l++, a++) {
    s[l].type || a--;
    const t2 = a % this.displayColumns;
    i2[t2] || (i2[t2] = []), i2[t2].push(s[l]);
  }
  return i2;
} }, render() {
  const { displayGutter: t } = this, r2 = this.getColumnsWithChildItems(), i2 = parseInt(t.toString(), 10) === 1 * t ? `${t}px` : t, n2 = { style: { display: ["-webkit-box", "-ms-flexbox", "flex"], marginLeft: `-${i2}` } }, s = { boxSizing: "border-box", backgroundClip: "padding-box", width: 100 / this.displayColumns + "%", border: "0px solid transparent", borderLeftWidth: i2 }, l = r2.map((t2, i3) => {
    const n3 = { key: `${i3}-${r2.length}`, style: this.css ? s : null, class: this.columnClass, attrs: this.columnAttr };
    return h(this.columnTag, n3, t2);
  });
  return h(this.tag, this.css && n2, l);
} });
var n = { install(t, e) {
  e && e.name ? t.component(e.name || "masonry", i) : t.component("masonry", i);
} };
var lib_es_default = n;
export {
  lib_es_default as default
};
//# sourceMappingURL=vue-next-masonry.js.map
